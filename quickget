#!/usr/bin/bash

export LC_ALL="C"

function main() {
    trap cleanup EXIT

    if ((BASH_VERSINFO[0] < 4)); then
        echo "Sorry, you need bash 4.0 or newer to run this script"
        exit 1
    fi

    PARAMS=""
    BASE_DIR="${BASH_SOURCE[0]%%/*}"
    PLUGINS="${BASE_DIR}/quickemu_plugins"

    # Set defaults for arguments
    declare -A DISTRO_INFO
    TEST_ISO_URL=false
    SHOW_ISO_URL=false
    OPEN_DISTRO_HOME_PAGE=false
    TESTING=false
    USE_COLOR=auto
    COLORS_SET=false

    while (( "${#}" )); do
        case "${1}" in
            list|list_csv)
                list_csv
                exit 0
                ;;
            list_json)
                list_json
                exit 0
                ;;
            --version|-version)
                "${BASE_DIR}"/quickemu ---version
                exit 0
                ;;
            --test-iso-url|-t)
                TEST_ISO_URL=true
                shift
                ;;
            --show-iso-url|-s)
                SHOW_ISO_URL=true
                shift
                ;;
            --open-distro-homepage|-o)
                OPEN_DISTRO_HOME_PAGE=true
                shift
                ;;
            --color)
                USE_COLOR="${2}"
                shift 2
                case "${USE_COLOR}" in
                    on|off|auto) : ;;
                    *)
                        error "valid values are [on|off|auto]"
                        ;;
                esac
                ;;
            --test)
                TESTING=true
                shift
                ;;
            --*|-*) # unsupported flags
                error "Unsuppotred flag ${1}"
                shift
                usage
                ;;
            *) # Preserve positional arguments
                PARAMS="${PARAMS} ${1}"
                shift
                ;;
        esac
    done

    # set positional arguments in their proper place
    eval set -- "${PARAMS}"

    [ -z "${1}" ] && OS="" || OS="${1,,}"
    [ -z "${2}" ] && RELEASE="" || RELEASE="${2,,}"
    [ -z "${3}" ] && EDITION="" || EDITION="${3,,}"

    [[ ${TESTING} == true ]] && testing

    if [ -z "${OS}" ]; then
        error "You must supply a distribution and release at a minimum"
        printf "Valid OS's:\n"
        supported_oses
        printf "\n"
        usage
    elif ! valid_os "${OS}"; then
        error "${OS} is not a valid os please resubmit with valid os"
        printf "Valid OS's:\n"
        supported_oses
        printf "\n"
        usage
    else            # shellcheck disable=SC1090
        source "${PLUGINS}/${OS}".plug          # get OS specific version of functions

        if [ -z "${RELEASE}" ]; then
            if editions_required; then
                error "You must specify a release and an edition for ${OS}:"
                printf "\t- Releases: %s\n" "$(releases)"
                printf "\t- Editions: %s\n" "$(editions)"
                printf "\n"
                usage
            else
                error "You must specify a release for %s ${OS}:"
                printf "\t- Releases: %s\n" "$(releases)"
                printf "\n"
                usage
            fi
        else
            if release_valid; then
                if edition_valid; then
                    :
                else
                    error "You must specify one of the valid release edition combinations for ${OS}"
                    printf "\t- Releases: %s\n" "$(releases)"
                    printf "\t- Editions: %s\n" "$(editions)"
                    printf "\n"
                    usage
                fi
                :
            else
                error "You must specify one of the valid release edition combinations for ${OS}"
                printf "\t- Releases: %s\n" "$(releases)"
                printf "\t- Editions: %s\n" "$(editions)"
                printf "\n"
                usage
            fi
        fi
    fi

    if ${OPEN_DISTRO_HOME_PAGE}; then
        open_url "$(homepage)"
    elif ${SHOW_ISO_URL}; then
        show_iso_url
        exit 0
    elif ${TEST_ISO_URL}; then
        test_iso_url
        exit 0
    else
        :
    fi

}

#
# Functions used by main
#

function cleanup() {
    if [ -n "$(jobs -p)" ]; then
        kill "$(jobs -p)"
    fi
}

function error() {
    if ! ${COLORS_SET}; then
        set +x
        set_colors
        set -x
        COLORS_SET=true
    fi

    printf "%sERROR: %s%s\n" "${fred}" "${reset}" "${*}"
}

function list_csv() {
    # TODO
    echo list_csv
}

function list_json {
    # TODO
    list_csv
    echo list_json
}

function open_url() {
    local url=${1}
    xdg-open "${url}" || sensible-brownser "${url}" || x-www-browser "${url}" || gnome-open "${url}";
}

function set_colors() {
    if [[ $(tput colors) -ge 8 ]]; then
#    if tput setaf 1 &> /dev/null; then      # Are colors supported
        tput sgr0
        if [[ "${USE_COLOR}" == "auto" ]]; then
            if [[ -t 1 ]] && [[ -t 2 ]]; then
                USE_COLOR="on"
            else
                USE_COLOR="off"
            fi
        fi
    else
        USE_COLOR="off"                     # color not supported
    fi

    # shellcheck disable=SC2034
    if [[ "${USE_COLOR}" == "on" ]]; then
        bold=$(tput bold)       ; dim=$(tput dim)
        smul=$(tput smul)       ; rmul=$(tput rmul)
        smso=$(tput smso)       ; rmso=$(tput rmso)
        rev=$(tput rev)         ; blink=$(tput blink)
        invis=$(tput invis)     ; reset=$(tput sgr0)

        fblack=$(tput setaf 0)  ; bblack=$(tput setab 0)
        fred=$(tput setaf 1)    ; bred=$(tput setab 1)
        fgreen=$(tput setaf 2)  ; bgreen=$(tput setab 2)
        fyellow=$(tput setaf 3) ; byellow=$(tput setab 3)
        fblue=$(tput setaf 4)   ; bblue=$(tput setab 4)
        fpurple=$(tput setaf 5) ; bpurple=$(tput setab 5)
        fcyan=$(tput setaf 6)   ; bcyan=$(tput setab 6)
        fwhite=$(tput setaf 7)  ; bwhite=$(tput setab 7)
    else
        bold=                   ; dim=
        smul=""                 ; rmul=""
        smso=""                 ; rmso=""
        rev=""                  ; blink=""
        invis=""                ; reset=""

        fblack=""               ; bblack=""
        fred=""                 ; bred=""
        fgreen=""               ; bgreen=""
        fyellow=""              ; byellow=""
        fblue=""                ; bblue=""
        fpurple=""              ; bpurple=""
        fcyan=""                ; bcyan=""
        fwhite=""               ; bwhite=""
    fi
}

function show_iso_url() {
    get "${EDITION}"
    echo "${DISTRO_INFO['url']}/${DISTRO_INFO['iso']}"
}

function supported_oses() {
    (
        cd "${PLUGINS}" || ( echo "${PLUGINS} not found"; exit )
        command ls ./*.plug* \
            | sed -e 's/*\///' -e 's/\.plug//' \
                -e 's/\.\///' \
            |   column -x
    )
    return 0
}

function test_iso_url() {
    wget --spider $(show_iso_url)
}

function usage() {
    printf "USAGE:\n"
    exit 1
}

function valid_os() {
    local OS=${1}
    # shellcheck disable=SC1090
    if [ -e "${BASE_DIR}/quickemu_plugins/${OS}.plug" ]; then
        source  "${PLUGINS}/${OS}.plug"
        return 0
    else
        return 1
    fi
}

function testing() {
    printf "================================\n"
    printf "TEST_ISO_URL         : %s\n" "${TEST_ISO_URL}"
    printf "SHOW_ISO_URL         : %s\n" "${SHOW_ISO_URL}"
    printf "OPEN_DISTRO_HOME_PAGE : %s\n" "${OPEN_DISTRO_HOME_PAGE}"
    printf "TESTING              : %s\n" "${TESTING}"
    printf "OS                   : %s\n" "${OS}"
    printf "RELEASE              : %s\n" "${RELEASE}"
    printf "EDITION              : %s\n" "${EDITION}"
    printf "================================\n"
}

main "${@}"
